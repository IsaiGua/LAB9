/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// Definir variables necesarias para los displays y UART
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;  // Comunicación UART

/* USER CODE BEGIN PV */
// Variable global para almacenar el dato recibido por UART
uint8_t dataUART = 0;  // Dato recibido por UART
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void displaySegment(uint8_t value);  // Función para controlar displays
void readUART(void);  // Función para leer datos UART
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Aquí se pueden agregar funciones adicionales según sea necesario
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  // Inicializar sistema y periféricos
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();  // Inicializar la HAL (Hardware Abstraction Layer)
  SystemClock_Config();  // Configurar el sistema de reloj
  MX_GPIO_Init();  // Inicializar los pines GPIO
  MX_USART2_UART_Init();  // Inicializar el UART2

  /* USER CODE BEGIN 2 */
  // Aquí puedes agregar código de inicialización adicional
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Leer datos desde el ESP32 usando UART
    readUART();

    // Mostrar los valores recibidos en los displays de 7 segmentos
    displaySegment(dataUART);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Código en el loop principal
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Boton1_Pin Boton2_Pin */
  GPIO_InitStruct.Pin = Boton1_Pin | Boton2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */
// Función para leer datos desde el ESP32 usando UART
void readUART(void) {
    if (HAL_UART_Receive(&huart2, &dataUART, 1, HAL_MAX_DELAY) == HAL_OK) {
        // Convertir de ASCII a entero
        dataUART = (dataUART - '0');
    }
}

// Función para mostrar los números y letras en el display de 7 segmentos
void displaySegment(uint8_t value) {
    // Apagar todos los segmentos antes de mostrar el valor
    HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);

    // Encender los segmentos correspondientes al valor recibido
    switch (value) {
        case 0:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, g_Pin, GPIO_PIN_RESET);
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
            break;
        case 2:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | g_Pin | e_Pin | d_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, c_Pin | f_Pin, GPIO_PIN_RESET);
            break;
        case 3:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | g_Pin | c_Pin | d_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, e_Pin | f_Pin, GPIO_PIN_RESET);
            break;
        case 4:
            HAL_GPIO_WritePin(GPIOA, f_Pin | g_Pin | b_Pin | c_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin, GPIO_PIN_RESET);
            break;
        case 5:
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin | g_Pin | c_Pin | d_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, b_Pin | e_Pin, GPIO_PIN_RESET);
            break;
        case 6:
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin | e_Pin | d_Pin | c_Pin | g_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET);
            break;
        case 7:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
            break;
        case 8:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
            break;
        case 9:
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, e_Pin, GPIO_PIN_RESET);
            break;
        case 10:  // A
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, d_Pin, GPIO_PIN_RESET);
            break;
        case 11:  // B
            HAL_GPIO_WritePin(GPIOA, c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin, GPIO_PIN_RESET);
            break;
        case 12:  // C
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin | e_Pin | d_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin | g_Pin, GPIO_PIN_RESET);
            break;
        case 13:  // D
            HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin | d_Pin | e_Pin | g_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin, GPIO_PIN_RESET);
            break;
        case 14:  // E
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin | g_Pin | e_Pin | d_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin, GPIO_PIN_RESET);
            break;
        case 15:  // F
            HAL_GPIO_WritePin(GPIOA, a_Pin | f_Pin | g_Pin | e_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin | d_Pin, GPIO_PIN_RESET);
            break;
        default:
            // Apagar todos los segmentos si el valor no es válido
            HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
            break;
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
